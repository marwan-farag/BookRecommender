
Steps:

--------------
After I read the document

1- Design a class diagram for the relation between entities
2- Checked the dataset and set a solution to load it once the solution start using (com.zenjobs.test.component.DataLoader)
3- Set what endpoint will be exposed to work within time scope
4- I thought first what are the criteria set for recommending books (Book gener, Author). but I worked with Book Gener only due time limit
5- I set a strategy  to add more data in for likes and dislikes to test well the solution using com.zenjobs.test.component.AppRunner)
---------------

senario:

- Call -> localhost:8080/books/1
	 * 1 at the endpoint = user requesting books. It's represented by "Reactor" Entity. 	
	 * You can use for available users [1,2,3,4,5] (inserted by AppRunner.java once the solution start) 
	  
	 * if user doesn't exist it throws {@link RecordNotFoundException} <br>
	 * if user exist and doesn't like or dislike anything, it retrieves random 20 books
	 * if user has criteria, it call {@link CollectorService} to retrieve what is suitable for user's interests

- response -> Json similar to the follwoing
		{
			"id": 21,
			"asin": 60394064,
			"title": "Taking Charge of Your Fertility: The Definitive Guide to Natural Birth Control, Pregnancy Achievement, and Reproductive Health (Revised Edition)",
			"gener": {
				"id": 2,
				"name": "Health, Fitness & Dieting"
				},
			"author": {
				"id": 21,
				"name": "Toni Weschler"
			}
		},
		{
			"id": 22,
			"asin": 60505915,
			"title": "The True Believer: Thoughts on the Nature of Mass Movements (Perennial Classics)",
			"gener": {
				"id": 2,
				"name": "Health, Fitness & Dieting"
			},
			"author": {
				"id": 22,
				"name": "Eric Hoffer"
			}
		}
		
- Exception:
		{
			"time": "2019-07-20T12:02:29.1512215",
			"message": "No User Found With ID: 9",
			"status": "NOT_FOUND",
			"path": "http://localhost:8080/books/9"
		}

---------------

Why I loaded data with this way using loaders and CommandLineRunner? 
to avoid missing relations between entities and keep consistency

-- Here I asked if we will need a service and response was only single endpoint required 
1- Started prototype and comments  in side Controller, Service and repository to work on clear steps 
2- Development phase started from services layer in parallel with repository layer. Final call in controller
3- Writing unit test cases for each layer
4- Writing integration test cases


Running Solution:

1- Test cases can be more than what's written and should be with all layers and classes, but I wrote a sample to prove my knowledge
2- Dataset in present beside application.yml in file "DS"
3- There a profile to test and for production 
	A. For running solution use "-Dspring.profiles.active=prod". This require postgres database, if can't use just replace with H2 Database like "test" profile
	B. For running test use "-Dspring.profiles.active=test"


Finally,

Thanks for considering my profile and for your time :). What ever the result, I would like to know your opinion to strengthen my weakness

Regards,

Nesrin